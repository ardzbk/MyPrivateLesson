// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OzelDers.Data.Concrete.EfCore.Context;

#nullable disable

namespace OzelDers.Data.Migrations
{
    [DbContext(typeof(PrivateLessonContext))]
    partial class PrivateLessonContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "017e48f4-28d6-40e6-b3b5-740178fe348d",
                            RoleId = "30ff35dd-3866-45c9-879f-b1a6ebe1dfd3"
                        },
                        new
                        {
                            UserId = "9725ae03-6471-4dbf-982e-8dabfcc5d73d",
                            RoleId = "8d1c8104-67cd-42f3-b185-a8de18e4b6bf"
                        },
                        new
                        {
                            UserId = "6dc72582-a387-4986-a3e6-8579780056e0",
                            RoleId = "8d1c8104-67cd-42f3-b185-a8de18e4b6bf"
                        },
                        new
                        {
                            UserId = "7d15f7ab-59b0-4fdc-af5f-b3a6679e476a",
                            RoleId = "8d1c8104-67cd-42f3-b185-a8de18e4b6bf"
                        },
                        new
                        {
                            UserId = "27f671d7-f91d-4f04-b3a5-49c0c8269e6f",
                            RoleId = "8d1c8104-67cd-42f3-b185-a8de18e4b6bf"
                        },
                        new
                        {
                            UserId = "5d2e0e62-8893-462d-902e-91edbcdc62f3",
                            RoleId = "8d1c8104-67cd-42f3-b185-a8de18e4b6bf"
                        },
                        new
                        {
                            UserId = "f7672743-d404-489d-a94e-b38567524321",
                            RoleId = "8d1c8104-67cd-42f3-b185-a8de18e4b6bf"
                        },
                        new
                        {
                            UserId = "09875cf2-8743-4485-9ec7-e53fba9e8561",
                            RoleId = "8d1c8104-67cd-42f3-b185-a8de18e4b6bf"
                        },
                        new
                        {
                            UserId = "fc151106-cb36-483f-887a-be75dd330661",
                            RoleId = "8d1c8104-67cd-42f3-b185-a8de18e4b6bf"
                        },
                        new
                        {
                            UserId = "b5d7b86b-3034-4280-a19b-f172bdb64a00",
                            RoleId = "8d1c8104-67cd-42f3-b185-a8de18e4b6bf"
                        },
                        new
                        {
                            UserId = "d5815fd3-b3ac-4b8e-808a-7458f76a45d4",
                            RoleId = "8d1c8104-67cd-42f3-b185-a8de18e4b6bf"
                        },
                        new
                        {
                            UserId = "aaa79067-b136-4088-b15e-875859ce6e11",
                            RoleId = "559b7044-6d24-4174-ba8a-399cb74029d2"
                        },
                        new
                        {
                            UserId = "eb7696e4-0884-4d14-b323-b1f741c83824",
                            RoleId = "559b7044-6d24-4174-ba8a-399cb74029d2"
                        },
                        new
                        {
                            UserId = "3048b95c-ee31-46b8-b8a0-cd37b8d21ba8",
                            RoleId = "559b7044-6d24-4174-ba8a-399cb74029d2"
                        },
                        new
                        {
                            UserId = "92c8f829-e555-4cb4-8b63-1fb21b1c178b",
                            RoleId = "559b7044-6d24-4174-ba8a-399cb74029d2"
                        },
                        new
                        {
                            UserId = "f8d91c58-9339-4efb-a435-3803676bf0c4",
                            RoleId = "559b7044-6d24-4174-ba8a-399cb74029d2"
                        },
                        new
                        {
                            UserId = "94b29472-e77f-4dd5-a535-bd6ef0aa31b3",
                            RoleId = "559b7044-6d24-4174-ba8a-399cb74029d2"
                        },
                        new
                        {
                            UserId = "e1d3b45a-32fb-4ca4-ae5e-9be1e0f10390",
                            RoleId = "559b7044-6d24-4174-ba8a-399cb74029d2"
                        },
                        new
                        {
                            UserId = "37bf95fd-a365-4112-97d5-35830bad6d28",
                            RoleId = "559b7044-6d24-4174-ba8a-399cb74029d2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Adverts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 4,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 119, DateTimeKind.Local).AddTicks(6090),
                            Description = "dsdasd",
                            IsApproved = true,
                            Price = 45m,
                            TeacherId = 4,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 119, DateTimeKind.Local).AddTicks(6110),
                            Url = "dsdds"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matematik",
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1430),
                            Description = "Matematik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1430),
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Fizik",
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1430),
                            Description = "Fizik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1440),
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "Kimya",
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1440),
                            Description = "Kimya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1440),
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Biyoloji",
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1440),
                            Description = "Biyoloji Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1440),
                            Url = "biyoloji"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Tarih",
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1440),
                            Description = "Tarih Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1440),
                            Url = "tarih"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Coğrafya",
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1440),
                            Description = "Coğrafya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1440),
                            Url = "cografya"
                        },
                        new
                        {
                            Id = 7,
                            BranchName = "İngilizce",
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1450),
                            Description = "İngilizce Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1450),
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 8,
                            BranchName = "Almanca",
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1450),
                            Description = "Almanca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1450),
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 9,
                            BranchName = "Fransızca",
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1450),
                            Description = "Fransızca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1450),
                            Url = "fransizca"
                        },
                        new
                        {
                            Id = 10,
                            BranchName = "Felsefe",
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1450),
                            Description = "Felsefe Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1450),
                            Url = "felsefe"
                        },
                        new
                        {
                            Id = 11,
                            BranchName = "Müzik",
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1450),
                            Description = "Müzik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1460),
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 12,
                            BranchName = "Resim",
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1460),
                            Description = "Resim Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(1460),
                            Url = "resim"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "017e48f4-28d6-40e6-b3b5-740178fe348d"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "9725ae03-6471-4dbf-982e-8dabfcc5d73d"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "6dc72582-a387-4986-a3e6-8579780056e0"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "7d15f7ab-59b0-4fdc-af5f-b3a6679e476a"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "27f671d7-f91d-4f04-b3a5-49c0c8269e6f"
                        },
                        new
                        {
                            Id = 6,
                            UserId = "5d2e0e62-8893-462d-902e-91edbcdc62f3"
                        },
                        new
                        {
                            Id = 7,
                            UserId = "f7672743-d404-489d-a94e-b38567524321"
                        },
                        new
                        {
                            Id = 8,
                            UserId = "09875cf2-8743-4485-9ec7-e53fba9e8561"
                        },
                        new
                        {
                            Id = 9,
                            UserId = "fc151106-cb36-483f-887a-be75dd330661"
                        },
                        new
                        {
                            Id = 10,
                            UserId = "b5d7b86b-3034-4280-a19b-f172bdb64a00"
                        },
                        new
                        {
                            Id = 11,
                            UserId = "d5815fd3-b3ac-4b8e-808a-7458f76a45d4"
                        },
                        new
                        {
                            Id = 12,
                            UserId = "aaa79067-b136-4088-b15e-875859ce6e11"
                        },
                        new
                        {
                            Id = 13,
                            UserId = "eb7696e4-0884-4d14-b323-b1f741c83824"
                        },
                        new
                        {
                            Id = 14,
                            UserId = "3048b95c-ee31-46b8-b8a0-cd37b8d21ba8"
                        },
                        new
                        {
                            Id = 15,
                            UserId = "92c8f829-e555-4cb4-8b63-1fb21b1c178b"
                        },
                        new
                        {
                            Id = 16,
                            UserId = "f8d91c58-9339-4efb-a435-3803676bf0c4"
                        },
                        new
                        {
                            Id = 17,
                            UserId = "94b29472-e77f-4dd5-a535-bd6ef0aa31b3"
                        },
                        new
                        {
                            Id = 18,
                            UserId = "e1d3b45a-32fb-4ca4-ae5e-9be1e0f10390"
                        },
                        new
                        {
                            Id = 19,
                            UserId = "37bf95fd-a365-4112-97d5-35830bad6d28"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "30ff35dd-3866-45c9-879f-b1a6ebe1dfd3",
                            Description = "Yöneticiler",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "559b7044-6d24-4174-ba8a-399cb74029d2",
                            Description = "Öğretmenler",
                            Name = "Ogretmen",
                            NormalizedName = "OGRETMEN"
                        },
                        new
                        {
                            Id = "8d1c8104-67cd-42f3-b185-a8de18e4b6bf",
                            Description = "Öğrenciler",
                            Name = "Ogrenci",
                            NormalizedName = "OGRENCI"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "017e48f4-28d6-40e6-b3b5-740178fe348d",
                            AccessFailedCount = 0,
                            City = "Kocaeli",
                            ConcurrencyStamp = "4fdad626-3148-4b4b-9f1e-b45828b32ac1",
                            DateOfBirth = new DateTime(2000, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ardaozbek@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Arda",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Ozbek",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARDAOZBEK@HOTMAIL.COM",
                            NormalizedUserName = "ARDAOZBEK",
                            PasswordHash = "AQAAAAIAAYagAAAAEAKy3Tm7WSbshPnJbtghWwx9X7jOHr7zh4fEDfJ0PM0xRN+2ZtNM0sj9BY64pVU8lw==",
                            Phone = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83a8b19f-f9ad-44d4-a40e-5e4831030954",
                            TwoFactorEnabled = false,
                            UserName = "ardaozbek"
                        },
                        new
                        {
                            Id = "9725ae03-6471-4dbf-982e-8dabfcc5d73d",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "93e7d53e-4e29-4421-9184-2bf720eeb7e9",
                            DateOfBirth = new DateTime(2007, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cananumac@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Canan",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Umac",
                            LockoutEnabled = false,
                            NormalizedEmail = "CANANUMAC@HOTMAIL.COM",
                            NormalizedUserName = "CANANUMAC",
                            PasswordHash = "AQAAAAIAAYagAAAAED7j3x1v5UCYAnpo3eEomgIiiFAXEoWzdwe3HL2dvvllxsp1J0udTTZtb2NzxEY4qg==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd923cb5-023a-41df-92fa-93f0eaf71a8a",
                            TwoFactorEnabled = false,
                            UserName = "cananumac"
                        },
                        new
                        {
                            Id = "6dc72582-a387-4986-a3e6-8579780056e0",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "e98e5b2d-677c-4308-8f68-a3bea65e6368",
                            DateOfBirth = new DateTime(2002, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "erdiutku@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Erdi",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Utku",
                            LockoutEnabled = false,
                            NormalizedEmail = "ERDIUTKU@GMAİL.COM",
                            NormalizedUserName = "ERDIUTKU",
                            PasswordHash = "AQAAAAIAAYagAAAAEO3maalEbtwIUWf1niI2JtJYKzT7An7Hazkk7w8L3PQpWX9KK+dgjDRgxRSXZCAtHA==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d81fc7e0-9c59-41fc-950e-a17d1ad7501b",
                            TwoFactorEnabled = false,
                            UserName = "erdiutku"
                        },
                        new
                        {
                            Id = "7d15f7ab-59b0-4fdc-af5f-b3a6679e476a",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "e142d017-2ac7-4318-96dd-54b684e892d4",
                            DateOfBirth = new DateTime(2001, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.demir@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.DEMIR@YAHOO.COM",
                            NormalizedUserName = "AYSEDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEJEPi2wZ/5fAYVPJG6z8c4lU7wQLJ6YGWz2T9wd0PATfrLxM78G5UoEo3ZxhZQToAg==",
                            Phone = "5329876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77b17e5d-ae1d-4209-80e4-61ac3a8dd491",
                            TwoFactorEnabled = false,
                            UserName = "aysedemir"
                        },
                        new
                        {
                            Id = "27f671d7-f91d-4f04-b3a5-49c0c8269e6f",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "7fa1ae41-cadc-4416-aa7b-664660005eb4",
                            DateOfBirth = new DateTime(2009, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmetkaya@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMETKAYA@HOTMAIL.COM",
                            NormalizedUserName = "MEHMETKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEGBtWWB6GOPHuOVsDhNA4LF5D9wIpG+W+c9yrQ57d4C0PJSMAztZXYmgQo6d0prk5g==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fea1cdc5-8d4b-4a0e-b1a0-10eaf440491a",
                            TwoFactorEnabled = false,
                            UserName = "mehmetkaya"
                        },
                        new
                        {
                            Id = "5d2e0e62-8893-462d-902e-91edbcdc62f3",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "a52fe9c4-3bd6-4b19-afca-ce3aeffcf197",
                            DateOfBirth = new DateTime(2003, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatmasahin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMASAHIN@GMAIL.COM",
                            NormalizedUserName = "FATMASAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAQvsiQMY5aT34elgXZuw0Qk/Z0kTUfYRIKmU5SoSZevbCRo9Zqt8Ph779qJ7oxqqQ==",
                            Phone = "5334567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13305226-1a4f-4f5d-a820-a737b122f55a",
                            TwoFactorEnabled = false,
                            UserName = "fatmasahin"
                        },
                        new
                        {
                            Id = "f7672743-d404-489d-a94e-b38567524321",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "f70c7821-9f3d-4e60-8be0-cd7d95e31181",
                            DateOfBirth = new DateTime(2008, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emreakin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Akın",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMREAKIN@HOTMAIL.COM",
                            NormalizedUserName = "EMREAKIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDK/3UnJHm2BCWgHnfQ70GIN5MwyJ96I/MOgQV8t48q1qDl1Tv50FFs38G3JZtDK1Q==",
                            Phone = "5379876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef07d8a5-131f-4305-9076-3d4854ce46f2",
                            TwoFactorEnabled = false,
                            UserName = "emreakin"
                        },
                        new
                        {
                            Id = "09875cf2-8743-4485-9ec7-e53fba9e8561",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "63ced254-61c4-4629-af16-827ac51a994c",
                            DateOfBirth = new DateTime(2005, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynepturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Türk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEPTURK@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEKTQ8r0vyWHhEUup1qE2gGRWoIvDw/KgE93aVGyDK9O72n97jhzeMYSEWj8FJv4kdw==",
                            Phone = "5336549872",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "414d52b3-1972-4ad3-a25d-596e4a160a4f",
                            TwoFactorEnabled = false,
                            UserName = "zeynepturk"
                        },
                        new
                        {
                            Id = "fc151106-cb36-483f-887a-be75dd330661",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "40fa3a66-202f-481b-bfd4-b1e19211c5c0",
                            DateOfBirth = new DateTime(2007, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "ALIYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEH511yFLVbyc5uE4dTMc66IDTOUUcdDQJUcBfRSjC3pknu1RrOS75j+U/w7nParV2A==",
                            Phone = "5559876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7a81098-ccbc-4caa-b202-4d8fd5bc5b40",
                            TwoFactorEnabled = false,
                            UserName = "aliyildiz"
                        },
                        new
                        {
                            Id = "b5d7b86b-3034-4280-a19b-f172bdb64a00",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "5733e1f0-4924-4b02-9c19-3140379f7674",
                            DateOfBirth = new DateTime(2009, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mustafaozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mustafa",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MUSTAFAOZKAN@GMAIL.COM",
                            NormalizedUserName = "MUSTAFAOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPN+DUXt+XNvX+XfLGBnAcR+ze3oi2WmbnixsQC1aD9UKEP9kV6llANegBifFHpVDQ==",
                            Phone = "5423456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0cd85894-5e05-45f1-9a26-68fb0edaf024",
                            TwoFactorEnabled = false,
                            UserName = "mustafaozkan"
                        },
                        new
                        {
                            Id = "d5815fd3-b3ac-4b8e-808a-7458f76a45d4",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "7e33881f-45ec-488b-b864-bc0045e38ff2",
                            DateOfBirth = new DateTime(2008, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRAAYDIN@HOTMAIL.COM",
                            NormalizedUserName = "ESRAAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOuMOFRIBcMWC1cgESOLYgLDvsXLTzgEy96btBVMM8tGtqvdTA8o9mCznozuUcw6KA==",
                            Phone = "5397891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e5671c9-26d6-409d-b71d-d09b17599797",
                            TwoFactorEnabled = false,
                            UserName = "esraaydin"
                        },
                        new
                        {
                            Id = "aaa79067-b136-4088-b15e-875859ce6e11",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "976efe73-3f36-4fad-97c5-ce7f1ba77b05",
                            DateOfBirth = new DateTime(1980, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "selinkar@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            Gender = "Kadın",
                            ImageId = 1,
                            LastName = "Kar",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELINKAR@HOTMAIL.COM",
                            NormalizedUserName = "SELINKAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEC/zxdFYYQwp8wms7RJ7EP0p9VqdzrSaNx9nDccN/I2BpwO6soKV4dB5/4/B5FmYXw==",
                            Phone = "5399782513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "615e169c-649b-4b1e-9b3e-68a2580dc522",
                            TwoFactorEnabled = false,
                            UserName = "selinkar"
                        },
                        new
                        {
                            Id = "eb7696e4-0884-4d14-b323-b1f741c83824",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "5aea8ab1-ef83-4096-a787-171dc34c1e3e",
                            DateOfBirth = new DateTime(1990, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cem.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cem",
                            Gender = "Erkek",
                            ImageId = 1,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "CEM.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "CEMYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEK3cARcNT+K7CqHU/R+xZDe8XCnePLctzWAzByOr/iS2XSZUEzYxccftov9GpLknSQ==",
                            Phone = "5323456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3db0d348-dc89-419c-ac05-f6a1d71e4044",
                            TwoFactorEnabled = false,
                            UserName = "cemyilmaz"
                        },
                        new
                        {
                            Id = "3048b95c-ee31-46b8-b8a0-cd37b8d21ba8",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "0029197d-6232-4d75-806b-b5b01938526c",
                            DateOfBirth = new DateTime(1992, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şevval",
                            Gender = "Kadın",
                            ImageId = 1,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "sevval.demir@hotmail.com",
                            NormalizedUserName = "SEVVALDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEK+gSq/N420oUQdLlJldSd9KXW0M1OoZ4TOh+4YLvvfENk/iXc2z4I1OeoGQ3yuTGg==",
                            Phone = "5387891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a5ab433-b385-4d50-9031-b6fc94b25c14",
                            TwoFactorEnabled = false,
                            UserName = "sevvaldemir"
                        },
                        new
                        {
                            Id = "92c8f829-e555-4cb4-8b63-1fb21b1c178b",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "68d5778d-a66c-4b64-bd58-e59954197664",
                            DateOfBirth = new DateTime(1994, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 1,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "MEHMETYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEKLNQJIw8GN/FZmsIHzOCKog45aYfw92IJiNVVsb17WfuQHgBnt0UwXgHPR94bIl/Q==",
                            Phone = "5336549876",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d21a14ee-8a6b-4080-8dc7-33582d19d812",
                            TwoFactorEnabled = false,
                            UserName = "mehmetyildiz"
                        },
                        new
                        {
                            Id = "f8d91c58-9339-4efb-a435-3803676bf0c4",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "02d9b1c6-3697-4fc9-8a4f-9685157af194",
                            DateOfBirth = new DateTime(1980, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gul.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gül",
                            Gender = "Kadın",
                            ImageId = 1,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUL.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "GULSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIGMpU1xYYwHU+L1cxSLDAOAaXdkaWDXWdFjuG+zNGRaLRCRHYiX2/JG+xB4QfFwiw==",
                            Phone = "5361234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f3f813e-45ba-4bf9-9087-f0af4c1f3ec9",
                            TwoFactorEnabled = false,
                            UserName = "gulsahin"
                        },
                        new
                        {
                            Id = "94b29472-e77f-4dd5-a535-bd6ef0aa31b3",
                            AccessFailedCount = 0,
                            City = "Kayseri",
                            ConcurrencyStamp = "d1bbf96f-46ff-4496-9a88-2f609c9fe701",
                            DateOfBirth = new DateTime(1987, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kemal.kaya@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kemal",
                            Gender = "Erkek",
                            ImageId = 1,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMAL.KAYA@GMAIL.COM",
                            NormalizedUserName = "KEMALKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEBM79IkKBupsu866EMDH/xuBG6IbDQXVz12ENZmzN23HWM1sBwiiprPwB/ZLO6GHrA==",
                            Phone = "5359876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c5823e8-d373-444e-8b72-19ef371b5c90",
                            TwoFactorEnabled = false,
                            UserName = "kemalkaya"
                        },
                        new
                        {
                            Id = "e1d3b45a-32fb-4ca4-ae5e-9be1e0f10390",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "bff00c9b-713c-4923-b223-7a685f452274",
                            DateOfBirth = new DateTime(1990, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gokhan.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gökhan",
                            Gender = "Erkek",
                            ImageId = 1,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKHAN.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GOKHANAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOy78GJoNtzRuPERX587Xo5EpmY/s+RKki78Cbf5N7mzAr58DuL+/w/6GDiE+kcUbQ==",
                            Phone = "5321234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6300690-7b79-4bcc-846f-94bf92569571",
                            TwoFactorEnabled = false,
                            UserName = "gokhanaydin"
                        },
                        new
                        {
                            Id = "37bf95fd-a365-4112-97d5-35830bad6d28",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "44df29d2-6ad2-4708-a1ce-5eae56b02d22",
                            DateOfBirth = new DateTime(1992, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seyma.yilmaz@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şeyma",
                            Gender = "Kadın",
                            ImageId = 1,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEYMA.YILMAZ@HOTMAIL.COM",
                            NormalizedUserName = "SEYMAYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAECKWFgrH0M6E01jHk2S+jV2HLE2mGqgyFvYZwqWcc4xv1tXm04nsnTxg2upUXtsNQg==",
                            Phone = "5399876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c7f82cf-f9a0-4e03-8802-cd5f50ebd593",
                            TwoFactorEnabled = false,
                            UserName = "seymayilmaz"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(2910),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(2920),
                            Url = "teacher-1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(2920),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(2920),
                            Url = "teacher-2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(2920),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(2920),
                            Url = "teacher-3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(2920),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(2920),
                            Url = "teacher-4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(2920),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 34, 120, DateTimeKind.Local).AddTicks(2920),
                            Url = "teacher-5.jpg"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3140),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3190),
                            UserId = "9725ae03-6471-4dbf-982e-8dabfcc5d73d"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3200),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3200),
                            UserId = "6dc72582-a387-4986-a3e6-8579780056e0"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3200),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3200),
                            UserId = "7d15f7ab-59b0-4fdc-af5f-b3a6679e476a"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3200),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3200),
                            UserId = "27f671d7-f91d-4f04-b3a5-49c0c8269e6f"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3200),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3210),
                            UserId = "5d2e0e62-8893-462d-902e-91edbcdc62f3"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3210),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3210),
                            UserId = "f7672743-d404-489d-a94e-b38567524321"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3210),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3210),
                            UserId = "09875cf2-8743-4485-9ec7-e53fba9e8561"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3210),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3210),
                            UserId = "fc151106-cb36-483f-887a-be75dd330661"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3220),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3220),
                            UserId = "b5d7b86b-3034-4280-a19b-f172bdb64a00"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3220),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3220),
                            UserId = "d5815fd3-b3ac-4b8e-808a-7458f76a45d4"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Graduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3270),
                            Graduation = "Çanakkale Onsekiz Mart Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3270),
                            UserId = "aaa79067-b136-4088-b15e-875859ce6e11"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3280),
                            Graduation = "Orta Doğu Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3290),
                            UserId = "eb7696e4-0884-4d14-b323-b1f741c83824"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3290),
                            Graduation = "İstanbul Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3290),
                            UserId = "3048b95c-ee31-46b8-b8a0-cd37b8d21ba8"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3290),
                            Graduation = "Ege Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3290),
                            UserId = "92c8f829-e555-4cb4-8b63-1fb21b1c178b"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3300),
                            Graduation = "Akdeniz Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3300),
                            UserId = "f8d91c58-9339-4efb-a435-3803676bf0c4"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3300),
                            Graduation = "Erciyes Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3300),
                            UserId = "94b29472-e77f-4dd5-a535-bd6ef0aa31b3"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3300),
                            Graduation = "Çukurova Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3300),
                            UserId = "e1d3b45a-32fb-4ca4-ae5e-9be1e0f10390"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3300),
                            Graduation = "Uludağ Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 17, 49, 33, 399, DateTimeKind.Local).AddTicks(3310),
                            UserId = "37bf95fd-a365-4112-97d5-35830bad6d28"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.TeacherBranch", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BranchId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherBranches");

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            BranchId = 2,
                            TeacherId = 2
                        },
                        new
                        {
                            BranchId = 3,
                            TeacherId = 3
                        },
                        new
                        {
                            BranchId = 4,
                            TeacherId = 4
                        },
                        new
                        {
                            BranchId = 5,
                            TeacherId = 5
                        },
                        new
                        {
                            BranchId = 6,
                            TeacherId = 6
                        },
                        new
                        {
                            BranchId = 7,
                            TeacherId = 7
                        },
                        new
                        {
                            BranchId = 7,
                            TeacherId = 8
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Advert", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Branch", "Branch")
                        .WithMany("Adverts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("Adverts")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Cart", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OzelDers.Entity.Concrete.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Identity.User", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Order", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Student", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("OzelDers.Entity.Concrete.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Identity.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("OzelDers.Entity.Concrete.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.TeacherBranch", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Branch", "Branch")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Student", "Student")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Branch", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("TeacherBranches");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Student", b =>
                {
                    b.Navigation("TeacherStudents");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("TeacherBranches");

                    b.Navigation("TeacherStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
